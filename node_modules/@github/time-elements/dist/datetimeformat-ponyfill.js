var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DateTimeFormat_options;
import { strftime } from './strftime.js';
export class DateTimeFormat {
    constructor(locale, options) {
        var _a;
        _DateTimeFormat_options.set(this, void 0);
        __classPrivateFieldSet(this, _DateTimeFormat_options, {
            locale: 'en',
            calendar: 'gregory',
            numberingSystem: 'latn',
            weekday: options.weekday,
            minute: options.minute,
            hour: options.hour,
            day: options.day,
            month: options.month,
            year: options.year,
            timeZone: (_a = options.timeZone) !== null && _a !== void 0 ? _a : ''
        }, "f");
        if (!Object.keys(options).length) {
            __classPrivateFieldGet(this, _DateTimeFormat_options, "f").day = '2-digit';
            __classPrivateFieldGet(this, _DateTimeFormat_options, "f").month = '2-digit';
            __classPrivateFieldGet(this, _DateTimeFormat_options, "f").year = 'numeric';
        }
    }
    formatToParts() {
        return [];
    }
    resolvedOptions() {
        return __classPrivateFieldGet(this, _DateTimeFormat_options, "f");
    }
    format(value) {
        let str = '';
        const { weekday, month, day, year, hour, minute, second } = this.resolvedOptions();
        if (weekday === 'long')
            str += '%A';
        if (weekday === 'short')
            str += '%a';
        if (weekday === 'narrow')
            str += '%a';
        if ((month === 'numeric' || month === '2-digit') && day && year) {
            str += `${weekday ? ', ' : ''}%m/%d/%${year === '2-digit' ? 'y' : 'Y'}`;
        }
        else {
            if (month === 'numeric')
                str += `${weekday ? ', ' : ''}%m`;
            if (month === '2-digit')
                str += `${weekday ? ', ' : ''}%m`;
            if (month === 'long')
                str += `${weekday ? ', ' : ''}%B`;
            if (month === 'short')
                str += `${weekday ? ', ' : ''}%b`;
            if (month === 'narrow')
                str += `${weekday ? ', ' : ''}%b`;
            if (day === 'numeric')
                str += ' %e';
            if (day === '2-digit')
                str += ' %d';
            if (year === 'numeric')
                str += ', %Y';
            if (year === '2-digit')
                str += ', %y';
        }
        if (hour === 'numeric')
            str += `${str ? ',' : ''}%l`;
        if (hour === '2-digit')
            str += `${str ? ', ' : ''}%H`;
        if (minute === 'numeric')
            str += `${hour ? ':' : ''}%M`;
        if (minute === '2-digit')
            str += `${hour ? ':' : ''}%M`;
        if (second === 'numeric')
            str += `${hour ? ':' : ''}%S`;
        if (second === '2-digit')
            str += `${hour || minute ? ':' : ''}%S`;
        if (hour)
            str += ' %p';
        return strftime(new Date(value), str.trim());
    }
}
_DateTimeFormat_options = new WeakMap();
